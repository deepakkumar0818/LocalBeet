import React, { useState } from 'react'
import { 
  ShoppingCart, 
  TrendingUp,
  Store,
  Coffee,
  ShoppingBag,
  Car,
  BarChart3
} from 'lucide-react'
import { XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts'

const Dashboard: React.FC = () => {
  const [activeTab, setActiveTab] = useState('overall')

  // Tab configuration
  const tabs = [
    { id: 'overall', name: 'Overall Sales', icon: BarChart3, color: 'text-indigo-600' },
    { id: 'kuwait-city', name: 'Kuwait City', icon: Store, color: 'text-blue-600' },
    { id: '360-mall', name: '360 Mall', icon: Coffee, color: 'text-green-600' },
    { id: 'vibes-complex', name: 'Vibes Complex', icon: ShoppingBag, color: 'text-orange-600' },
    { id: 'taiba-hospital', name: 'Taiba Hospital', icon: Car, color: 'text-purple-600' }
  ]

  // Mock sales data for each outlet
  const outletSalesData = {
    'kuwait-city': {
      name: 'Kuwait City',
      totalSales: 125000,
      totalOrders: 156,
      avgOrderValue: 801,
      topProducts: [
        { name: 'Caesar Salad', sales: 12500, orders: 45 },
        { name: 'Grilled Chicken', sales: 9800, orders: 38 },
        { name: 'Pasta Carbonara', sales: 8700, orders: 32 }
      ],
      dailySales: [
        { day: 'Mon', sales: 8500 },
        { day: 'Tue', sales: 9200 },
        { day: 'Wed', sales: 7800 },
        { day: 'Thu', sales: 10500 },
        { day: 'Fri', sales: 12800 },
        { day: 'Sat', sales: 15200 },
        { day: 'Sun', sales: 11800 }
      ]
    },
    '360-mall': {
      name: '360 Mall',
      totalSales: 89000,
      totalOrders: 134,
      avgOrderValue: 664,
      topProducts: [
        { name: 'Cappuccino', sales: 9800, orders: 65 },
        { name: 'Latte', sales: 7200, orders: 48 },
        { name: 'Croissant', sales: 5400, orders: 36 }
      ],
      dailySales: [
        { day: 'Mon', sales: 6200 },
        { day: 'Tue', sales: 6800 },
        { day: 'Wed', sales: 5900 },
        { day: 'Thu', sales: 7500 },
        { day: 'Fri', sales: 9200 },
        { day: 'Sat', sales: 10800 },
        { day: 'Sun', sales: 8200 }
      ]
    },
    'vibes-complex': {
      name: 'Vibes Complex',
      totalSales: 67000,
      totalOrders: 98,
      avgOrderValue: 684,
      topProducts: [
        { name: 'Burger Deluxe', sales: 8200, orders: 28 },
        { name: 'Chicken Wrap', sales: 6500, orders: 25 },
        { name: 'French Fries', sales: 4800, orders: 32 }
      ],
      dailySales: [
        { day: 'Mon', sales: 4800 },
        { day: 'Tue', sales: 5200 },
        { day: 'Wed', sales: 4500 },
        { day: 'Thu', sales: 5800 },
        { day: 'Fri', sales: 7200 },
        { day: 'Sat', sales: 8500 },
        { day: 'Sun', sales: 6200 }
      ]
    },
    'taiba-hospital': {
      name: 'Taiba Hospital',
      totalSales: 45000,
      totalOrders: 67,
      avgOrderValue: 672,
      topProducts: [
        { name: 'Quick Sandwich', sales: 6800, orders: 22 },
        { name: 'Coffee', sales: 4200, orders: 35 },
        { name: 'Energy Bar', sales: 3200, orders: 18 }
      ],
      dailySales: [
        { day: 'Mon', sales: 3200 },
        { day: 'Tue', sales: 3500 },
        { day: 'Wed', sales: 2800 },
        { day: 'Thu', sales: 4200 },
        { day: 'Fri', sales: 4800 },
        { day: 'Sat', sales: 5200 },
        { day: 'Sun', sales: 3800 }
      ]
    }
  }

  // Calculate overall data
  const overallData = {
    totalSales: Object.values(outletSalesData).reduce((sum, outlet) => sum + outlet.totalSales, 0),
    totalOrders: Object.values(outletSalesData).reduce((sum, outlet) => sum + outlet.totalOrders, 0),
    avgOrderValue: 0, // Will be calculated
    outletBreakdown: Object.entries(outletSalesData).map(([key, outlet]) => ({
      name: outlet.name,
      sales: outlet.totalSales,
      orders: outlet.totalOrders,
      percentage: 0 // Will be calculated
    }))
  }

  // Calculate averages and percentages
  overallData.avgOrderValue = Math.round(overallData.totalSales / overallData.totalOrders)
  overallData.outletBreakdown.forEach(outlet => {
    outlet.percentage = Math.round((outlet.sales / overallData.totalSales) * 100)
  })


  // Render outlet sales content
  const renderOutletContent = (outletId: string) => {
    if (outletId === 'overall') {
  return (
    <div className="space-y-6">
          {/* Overall Stats */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-3">
            <div className="card p-6">
              <div className="flex items-center">
                <div className="p-3 rounded-lg bg-indigo-500">
                  <BarChart3 className="h-6 w-6 text-white" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Sales</p>
                  <p className="text-2xl font-semibold text-gray-900">${overallData.totalSales.toLocaleString()}</p>
                </div>
              </div>
            </div>
            <div className="card p-6">
              <div className="flex items-center">
                <div className="p-3 rounded-lg bg-green-500">
                  <ShoppingCart className="h-6 w-6 text-white" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Orders</p>
                  <p className="text-2xl font-semibold text-gray-900">{overallData.totalOrders}</p>
        </div>
        </div>
      </div>
            <div className="card p-6">
              <div className="flex items-center">
                <div className="p-3 rounded-lg bg-blue-500">
                  <TrendingUp className="h-6 w-6 text-white" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Avg Order Value</p>
                  <p className="text-2xl font-semibold text-gray-900">${overallData.avgOrderValue}</p>
                  </div>
                </div>
              </div>
            </div>

          {/* Outlet Breakdown */}
          <div className="card p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-6">Sales by Outlet</h3>
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
              {overallData.outletBreakdown.map((outlet, index) => (
                <div key={outlet.name} className="flex flex-col items-center p-6 bg-gray-50 rounded-lg border border-gray-200 hover:shadow-md transition-shadow">
                  <div className={`p-4 rounded-full mb-4 ${
                    index === 0 ? 'bg-blue-100' : 
                    index === 1 ? 'bg-green-100' : 
                    index === 2 ? 'bg-orange-100' : 'bg-purple-100'
                  }`}>
                    {index === 0 ? <Store className="h-8 w-8 text-blue-600" /> :
                     index === 1 ? <Coffee className="h-8 w-8 text-green-600" /> :
                     index === 2 ? <ShoppingBag className="h-8 w-8 text-orange-600" /> :
                     <Car className="h-8 w-8 text-purple-600" />}
                  </div>
                  <div className="text-center space-y-2">
                    <p className="font-semibold text-gray-900 text-lg">{outlet.name}</p>
                    <p className="text-sm text-gray-600">{outlet.orders} orders</p>
                    <p className="font-bold text-gray-900 text-xl">${outlet.sales.toLocaleString()}</p>
                    <div className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {outlet.percentage}% of total
                    </div>
                  </div>
                </div>
              ))}
            </div>
      </div>

          {/* Overall Charts */}
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
            {/* Overall Sales Trend */}
        <div className="card p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Overall Sales Trend</h3>
          <ResponsiveContainer width="100%" height={300}>
                <LineChart data={[
                  { day: 'Mon', sales: 22700 },
                  { day: 'Tue', sales: 24700 },
                  { day: 'Wed', sales: 21000 },
                  { day: 'Thu', sales: 28000 },
                  { day: 'Fri', sales: 34000 },
                  { day: 'Sat', sales: 39700 },
                  { day: 'Sun', sales: 30000 }
                ]}>
              <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="day" />
              <YAxis />
                  <Tooltip formatter={(value) => [`$${value}`, 'Sales']} />
                  <Line type="monotone" dataKey="sales" stroke="#3B82F6" strokeWidth={3} />
            </LineChart>
          </ResponsiveContainer>
        </div>

            {/* Top Products Overall */}
        <div className="card p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Top Products Overall</h3>
              <div className="space-y-4">
                {[
                  { name: 'Caesar Salad', sales: 12500, orders: 45, outlet: 'Kuwait City' },
                  { name: 'Cappuccino', sales: 9800, orders: 65, outlet: '360 Mall' },
                  { name: 'Grilled Chicken', sales: 9800, orders: 38, outlet: 'Kuwait City' },
                  { name: 'Burger Deluxe', sales: 8200, orders: 28, outlet: 'Vibes Complex' },
                  { name: 'Latte', sales: 7200, orders: 48, outlet: '360 Mall' }
                ].map((product, index) => (
                  <div key={product.name} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <div className="flex items-center space-x-4">
                      <div className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                        <span className="text-sm font-semibold text-blue-600">{index + 1}</span>
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{product.name}</p>
                        <p className="text-sm text-gray-600">{product.outlet} • {product.orders} orders</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-gray-900">${product.sales.toLocaleString()}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    }

    const outlet = outletSalesData[outletId as keyof typeof outletSalesData]
    if (!outlet) return null

    return (
      <div className="space-y-6">
        {/* Outlet Stats */}
        <div className="grid grid-cols-1 gap-6 sm:grid-cols-3">
          <div className="card p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-lg bg-blue-500">
                <BarChart3 className="h-6 w-6 text-white" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Sales</p>
                <p className="text-2xl font-semibold text-gray-900">${outlet.totalSales.toLocaleString()}</p>
              </div>
            </div>
          </div>
          <div className="card p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-lg bg-green-500">
                <ShoppingCart className="h-6 w-6 text-white" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Orders</p>
                <p className="text-2xl font-semibold text-gray-900">{outlet.totalOrders}</p>
              </div>
            </div>
          </div>
          <div className="card p-6">
            <div className="flex items-center">
              <div className="p-3 rounded-lg bg-purple-500">
                <TrendingUp className="h-6 w-6 text-white" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Avg Order Value</p>
                <p className="text-2xl font-semibold text-gray-900">${outlet.avgOrderValue}</p>
              </div>
            </div>
        </div>
      </div>

        {/* Charts */}
        <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
          {/* Daily Sales Chart */}
          <div className="card p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Daily Sales Trend</h3>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={outlet.dailySales}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="day" />
                <YAxis />
                <Tooltip formatter={(value) => [`$${value}`, 'Sales']} />
                <Line type="monotone" dataKey="sales" stroke="#3B82F6" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </div>

          {/* Top Products */}
      <div className="card p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Top Products</h3>
        <div className="space-y-4">
              {outlet.topProducts.map((product, index) => (
                <div key={product.name} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">{product.name}</p>
                    <p className="text-sm text-gray-600">{product.orders} orders</p>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold text-gray-900">${product.sales.toLocaleString()}</p>
              </div>
            </div>
          ))}
        </div>
        </div>
      </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Sales Dashboard</h1>
          <p className="text-gray-600">Monitor sales performance across all outlets</p>
        </div>
        <div className="flex items-center space-x-2 text-sm text-gray-500">
          <TrendingUp className="h-4 w-4" />
          <span>Last updated: {new Date().toLocaleString()}</span>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {tabs.map((tab) => {
            const Icon = tab.icon
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <Icon className={`h-4 w-4 ${activeTab === tab.id ? tab.color : ''}`} />
                <span>{tab.name}</span>
              </button>
            )
          })}
        </nav>
      </div>

      {/* Tab Content */}
      {renderOutletContent(activeTab)}
    </div>
  )
}

export default Dashboard
